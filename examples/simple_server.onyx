#load "core/std"

#load_path "./lib"
#load "./module"

#tag http.route.{.GET, "/test"}
_ :: (req: ^http.Request, res: ^http.Response) {
    v := req->get_query_param(i32, "val");
    name := req->get_query_param(str, "name");

    res->status(200);
    res->html(core.tprintf("<div style='color:red;'>Hello, {}! {}</div>", name, v));
}

require_logon :: (req: ^http.Request, res: ^http.Response) {
    if !req.cookies->has("redirected") {
        res->redirect("/redirectme");
        res->end();
    }
}

#tag http.route.{.GET, "/"}
#tag http.middleware.{require_logon}
_ :: (req: ^http.Request, res: ^http.Response) {
    res->status(200);
    res->file("examples/index.html");
}

#tag http.route.{.GET, "/redirectme"}
_ :: (req: ^http.Request, res: ^http.Response) {
    res->cookie("redirected", "true");
    res->redirect("/test");
}

#tag http.route.{.GET, "/locked"}
_ :: (req: ^http.Request, res: ^http.Response) {
    if req.headers->has("Authorization") {
        auth := req.headers["Authorization"];

        if core.string.starts_with(auth, "Basic ") {
            core.string.advance(^auth, "Basic ".length);

            creds := base64.decode(auth);
            defer delete(^creds);

            user, pass := core.string.bisect(creds, #char ":");
            core.printf("User: {}\nPass: {}\n", user, pass);

            res->redirect("/");
            return;
        }
    }

    res.headers["WWW-Authenticate"] = "Basic realm=\"Test\"";
    res->status(401);
}

main :: () {
    app := http.application();

    static := http.static("/static", "examples/static");
    app->pipe(^static);

    router := http.router();
    router->collect_routes();

    inner_router := http.router();
    inner_router->get("/other", (req, res) => {
        res->status(200);
        res->html("<h1>Inner page!</h1>");
        res->end();
    });

    router->route("/inner", ^inner_router);

    app->pipe(^router);

    logger := http.logger();
    app->pipe(^logger);

    app->serve(8080);
}

HTTP_EXAMPLE :: true

