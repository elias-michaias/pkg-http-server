#load "core/std"

#load_path "./lib"
#load "./module"

use core {package, tprintf}
use http
use http.server {
    Req :: Request,
    Res :: Response,
    Route :: route,
    Middleware :: middleware
}

#inject
Res.template :: (res: &Res, file: str) {
    core.printf("Responding to request with template: {}\n", file);
    res->status(200);
    res->body("", "text/html");
    res->end();
}

@Route.{.GET, "/test"}
(req: &Req, res: &Res) {
    v := req->query_param(i32, "val");
    name := req->query_param(str, "name");

    res->status(200);
    res->html(core.tprintf("<div style='color:red;'>Hello, {}! {}</div>", name, v));
}

login_required :: (req: &Req, res: &Res) {}

is_admin :: (req: &Req, res: &Res) {
    if req->query_param(i32, "admin_passcode") != 8675309 {
        res->status(401);
        res->body("text/plain", "Unauthorized");
        res->end();
    }
}

@Route.{.GET, "/admin"}
@Middleware.{login_required}
@Middleware.{is_admin}
(req: &Req, res: &Res) {
    res->status(200);
    res->html("Worked");
}

@Route.{.GET, "/json"}
(req: &Req, res: &Res) {
    V :: struct {x, y: i32}

    res->status(200);
    res->json(.{
        test = 123,
        value = "Hmmm",
        array = .[1, 2, 3],
        array2 = .["qwer", "asdf", "zxcv"],
        array3 = V.[.{1,2},.{3,4},.{5,6}]
    });
}

@Route.{.GET, "/templated"}
(req: &Req, res: &Res) {
    res->template("working!!");
}

require_logon :: (req: &Req, res: &Res) {
    if !(req.cookies->has("redirected")) {
        res->redirect("/redirectme");
        res->end();
    }
}

@Route.{.GET, "/"}
@http.server.middleware.{require_logon}
(req: &Req, res: &Res) {
    res->status(200);
    res->file("examples/index.html");
}

@Route.{.POST, "/"}
(req: &Req, res: &Res) {
    if req.body->is_form() {
        data := req.body->form();

        res->status(200);

        html := core.tprintf("<h1>Hello, {}!</h1>", data->field(str, "name") ?? "whoever you are!");
        res->html(html);

        return;
    }

    res->status(400);
}

@Route.{.GET, "/redirectme"}
(req: &Req, res: &Res) {
    res->cookie("redirected", "true");
    res->redirect("/test");
}

@Route.{.GET, "/locked"}
(req: &Req, res: &Res) {
    if req.headers->has("authorization") {
        auth := req.headers["authorization"];

        if core.string.starts_with(auth, "Basic ") {
            core.string.advance(&auth, "Basic ".length);

            creds := core.encoding.base64.decode(auth);
            defer delete(&creds);

            user, pass := core.string.bisect(creds, #char ":");
            core.printf("User: {}\nPass: {}\n", user, pass);

            res->redirect("/");
            return;
        }
    }

    res.headers["WWW-Authenticate"] = "Basic realm=\"Test\"";
    res->status(401);
}

@Route.{.GET, "/url/params/:param1/:param2" }
(req: &Req, res: &Res) {
    core.println(req.url_params);
    res->status(200);
}

@Route.{.GET, "/url/params" }
(req: &Req, res: &Res) {
    core.println("Please provide params");
    res->status(200);
}


Input :: struct {
    name: str;
    age:  u32;
    data: [] u32;
}

@Route.{.POST, "/json"}
(req: &Req, res: &Res) {
    input := req.body->json_as(Input);
    core.println(input);

    res->status(200);
    res->end();
}

main :: () {
    app := http.server.pipeline();

    static := http.server.static("/static", "examples/static");
    app->pipe(&static);

    router := http.server.router();
    app->pipe(&router);

    router->collect_routes(#this_package);

    inner_router := http.server.router();
    inner_router->get("/", (req, res) => {
        res->status(200);
        res->html("<h1>Inner Index page!</h1>");
        res->end();
    });

    inner_router->get("/other", (req, res) => {
        res->status(200);
        res->html(tprintf("<h1>Inner Other page! {}</h1>", req.endpoint));
        res->end();
    });

    inner_router->get("/:the_page_name", (req, res) => {
        res->status(200);
        res->html(tprintf("<h1>{} page!</h1>", req.url_params["the_page_name"]));
        res->end();
    });

    router->route("/inner", &inner_router);

    logger := http.server.logger();
    app->pipe(&logger);

    tcp := http.server.tcp(app);
    tcp->serve(8080);
}
