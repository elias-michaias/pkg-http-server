package http.server

Logger :: struct {
    writer: io.Writer;

    style := LoggerStyle.V1;

    log :: logger_log_request
}

LoggerStyle :: enum {
    V1;
    V2;
}


logger :: (s: &io.Stream = &core.stdio.stream, style := LoggerStyle.V1) -> Logger {
    return .{
        io.writer_make(s),
        style
    };
}

#package
logger_log_request :: (l: &Logger, req: &Request, res: &Response) {
    // This should have the ability to change the logging format.
    switch l.style {
        case .V1 do 
            io.write_format(
                &l.writer,
                "[{}] {} {} {}{} - {}\n",
                context.thread_id,
                req.address.ip,
                req.method,
                req.headers["host"] ?? "", req.endpoint,
                res.status_code);

        case .V2 {
            status_color := "92";
            if res.status_code / 100 != 2 {
                status_color = "93";
            }
            if res.status_code >= 400 {
                status_color = "91";
            }

            io.write_format(
                &l.writer,
                "{}: [\e[1;{}m{}\e[0m] \e[1;94m{} {}\e[0m  host: '{}' client: '{}'\n",
                context.thread_id,
                status_color,
                res.status_code,
                req.method,
                req.endpoint,
                req.headers["host"] ?? "",
                req.address.ip
            );
        }
    }

    io.writer_flush(&l.writer);
    io.stream_flush(l.writer.stream);
}

#overload
Pipeable.as_pipe :: macro (l: &Logger) => Pipe.{
    logger_log_request,
    l,
    execute_after_request = true,
}
