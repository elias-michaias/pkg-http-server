package http


Static_File_Router :: struct {
    base_route: str;
    base_path:  str;

    handle :: static_file_router_handle 
}

static :: (route, path: str) -> Static_File_Router {
    return .{ route, path }; 
}

#package
static_file_router_handle :: (sf: ^Static_File_Router, req: ^Request, res: ^Response) -> Pipeline.Action {
    if !string.starts_with(req.endpoint, sf.base_route) do return .Proceed;

    file_path := req.endpoint[sf.base_route.count .. req.endpoint.count];
    full_path := core.tprintf("{}{}", sf.base_path, file_path);

    if !os.file_exists(full_path) {
        res->status(404);
        return .Finish;
    }

    contents := os.get_contents(full_path);

    res->status(200);
    res->body(http.guess_mime_type(full_path), contents);
    return .Finish;
}

#overload
convert_to_pipe :: macro (sf: ^Static_File_Router) => Pipe.{ sf.handle, sf };
