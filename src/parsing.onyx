package http.server

#package
parse_url_encoded_key_value :: (dest: &Map(str, str), input: &str) {
    // @ErrorHandling
    while !str.empty(*input) {
        key   := str.read_until(input, '=') |> urldecode();
        str.advance(input);
        value := str.read_until(input, '&') |> urldecode();
        str.advance(input);

        dest->put(key, value);
    }
}

#package
parse_url_encoded_key_value_multi :: (dest: &Map(str, [..] str), input: &str) {
    // @ErrorHandling
    while !str.empty(*input) {
        key   := str.read_until(input, '=') |> urldecode();
        str.advance(input);
        value := str.read_until(input, '&') |> urldecode();
        str.advance(input);

        values := dest->get_ptr_or_create(key);
        Array.push(values, value);
    }
}

#package
parse_header :: #match #local {}

#overload
parse_header :: (r: &io.Reader) -> (str, str) {
    line := r->read_line();
    if line == "\r\n" do return "", "";

    return parse_header(&line);
}

#overload
parse_header :: (line: &str) -> (str, str) {
    l := str.read_until(line, '\n');
    str.advance_line(line);

    header := str.read_until(&l, ':');
    str.advance(&l, 2);

    // Remove the \r\n that occurs at the end of the value.
    value := l;
    str.strip_trailing_whitespace(&value);

    header = str.to_lowercase(header);

    return header, value;
}

#package
parse_cookies :: #match #local {}

#overload
parse_cookies :: (line: str, m: &Map(str, str)) {
    value := line;
    while true {
        pair := str.read_until(&value, "; ");
        if pair.count == 0 do break;

        k, v := str.bisect(pair, '=');
        m->put(k, v);

        str.advance(&value, 2);
    }
}

