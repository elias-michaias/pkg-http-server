package http.server

HTTP_Method :: enum {
    UNKNOWN;
    GET;
    HEAD;
    POST;
    PUT;
    DELETE;
    CONNECT;
    OPTIONS;
    TRACE;
    PATCH;

    ALL;
}

urlencode :: (s: str, allocator := context.allocator) -> str {
    out := make([..] u8, s.count, allocator=allocator);

    for ch in s do switch ch {
        //
        // This list was taken from:
        // https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding
        match(':', "%3A");
        match('/', "%2F");
        match('?', "%3F");
        match('#', "%23");
        match('[', "%5B");
        match(']', "%5D");
        match('@', "%40");
        match('!', "%21");
        match('$', "%24");
        match('&', "%26");
        match('\'', "%27");
        match('(', "%28");
        match(')', "%29");
        match('*', "%2A");
        match('+', "%2B");
        match(',', "%2C");
        match(';', "%3B");
        match('<', "%3C");
        match('=', "%3D");
        match('>', "%3E");
        match('%', "%25");
        match(' ', "%20");
        match('"', "%22");

        case _ do out << ch;

        match :: macro (from: u8, to: str) {
            //
            // How's this for a one-liner
            case from do for to do out << it;
        }
    }

    return out;
}

urldecode :: (s: str, allocator := context.allocator) -> str {
    out := make([..] u8, s.count, allocator=allocator);

    i := iter.as_iter(s);
    defer iter.close(i);

    for #no_close ch in i {
        if ch == '%' {
            a := iter.next(i) ?? 0;
            b := iter.next(i) ?? 0;

            n := u8.[a, b];

            v := conv.str_to_i64(n, base=16);
            switch v {
                match(0x3A, ':');
                match(0x2F, '/');
                match(0x3F, '?');
                match(0x23, '#');
                match(0x5B, '[');
                match(0x5D, ']');
                match(0x40, '@');
                match(0x21, '!');
                match(0x24, '$');
                match(0x26, '&');
                match(0x27, '\'');
                match(0x28, '(');
                match(0x29, ')');
                match(0x2A, '*');
                match(0x2B, '+');
                match(0x2C, ',');
                match(0x3B, ';');
                match(0x3C, '<');
                match(0x3D, '=');
                match(0x3E, '>');
                match(0x25, '%');
                match(0x20, ' ');
                match(0x22, '"');

                match :: macro (from: i64, to: u8) {
                    case from do out << to;
                }
            }

        } elseif ch == '+' {
            out << ' ';
        } else {
            out << ch;
        }
    }

    return out;
}

#package known_mimetypes: Map(str, str);
guess_mime_type :: (filename: str) -> str {
    extension := filename[str.last_index_of(filename, '.')+1 .. filename.count];

    known_mimetypes->get(extension)->with([mimetype] {
        return mimetype;
    });

    //
    // This is a small list of mime types that should be expanded
    // on in the future. I don't know if it is worth pulling all
    // of the known mime types from:
    //
    // https://www.iana.org/assignments/media-types/media-types.xhtml
    //
    // or if that is a little overkill.
    switch extension {
        case "html" do return "text/html";
        case "css"  do return "text/css";
        case "js"   do return "text/javascript";
        case "xml"  do return "text/xml";

        case "jpg", "jpeg"  do return "image/jpeg";
        case "png"          do return "image/png";

        case _ do return "application/text";
    }
}

set_mime_type :: (ext: str, type: str) {
    known_mimetypes->put(ext, type);
}


#package {
    // The http-server library uses a single allocator across all uses,
    // even if multiple applications are used (for some reason).

    long_term_allocator: Allocator;
    short_term_allocator: Allocator;
    short_term_arena: arena.ArenaState;

    prepare_allocators :: #init () {
        long_term_allocator = context.allocator;
        short_term_arena = arena.make(long_term_allocator, 1 * 1024 * 1024);
        short_term_allocator = arena.make_allocator(&short_term_arena);

        known_mimetypes->init();
    }

    use_gc_allocator_in_current_scope :: macro (gc: &alloc.gc.GCState) {
        old_allocator := context.allocator;
        context.allocator = alloc.as_allocator(gc);
        defer {
            alloc.gc.clear(gc);
            context.allocator = old_allocator;
        }
    }
}
