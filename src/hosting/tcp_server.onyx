package http.server

use runtime

TCP_Server :: struct {
    server: &net.TCP_Server;
    pipeline: Pipeline;

    session_gc: alloc.gc.GCState;
}

#inject TCP_Server {
    serve :: tcp_serve;
}

tcp :: #match {}

#overload
tcp :: (pipeline: Pipeline) => TCP_Server.{ pipeline = pipeline };

#overload
tcp :: (p: $P/Pipeable) -> TCP_Server {
    pipe := pipeline();
    pipe->pipe(p);
    return TCP_Server.{ pipeline = pipe };
}

Serve_Status :: enum {
    Success;
    Failed_To_Bind;
}

#package
tcp_serve :: (tcp: &TCP_Server, port: u32) -> Serve_Status {
    tcp.session_gc = alloc.gc.make();

    tcp.server = net.tcp_server_make(max_clients=16);
    tcp.server.emit_data_events = false;

    // Allows the server to be immediately restarted. Not
    // the safest, but it is fine for a development instance.
    tcp.server.socket->setting(.ReuseAddress, 1);

    if !(tcp.server->listen(~~port)) {
        log(.Error, "HTTP-Server", core.tprintf("Failed to bind to port {}.\n", port));
        return .Success;
    }

    log(.Info, "HTTP-Server", core.tprintf("Serving on port {}", port));
    tcp.server->handle_events() {
        case .Connection {
            // Enable non-blocking communication on all sockets
            cast(&core.net.TCP_Event.Connection, it.data).client.socket->setting(.NonBlocking, 1);
        }

        case .Ready {
            ready_client := cast(&core.net.TCP_Event.Ready, it.data).client;
            if ready_client.socket.vtable == null || ready_client.state != .Alive {
                log(.Warning, "HTTP-Server", "Discarding dead client");
                ready_client->read_complete();
                continue;
            }

            use_gc_allocator_in_current_scope(&tcp.session_gc);
            defer alloc.clear_temp_allocator();

            if !handle_request(tcp, &ready_client.address, &ready_client.socket) {
                // If the request fails to parse, shutdown the connection.
                // Likely, this is actually due to the socket being empty
                // and/or already closed, but you can't tell until you try
                // to read from it.
                tcp.server->kill_client(ready_client);

            } else {
                ready_client->read_complete();
            }
        }
    }
}

#local
handle_request :: (tcp: &TCP_Server, req_address: &net.Socket_Address, s: &net.Socket) -> bool {
    req := Request.{ address = .{ req_address->addr_as_str() } };
    defer request_free(&req);

    reader := io.reader_make(s);
    defer io.reader_free(&reader);

    //
    // Loop until there is no data buffered in the reader.
    // If two requests were sent back-to-back, there is a non-zero
    // chance the reader will start consuming the second request
    // when reading the body/headers of the first. If it does,
    // immediately process that data here, otherwise it will be
    // lost forever. If the reader doesn't start reading those bytes,
    // then the TCP server will just say that the client is ready
    // to be read from again.
    while #bottom_test io.reader_get_buffered(&reader) > 0 {
        if !parse_request(&req, &reader) {
            return false;
        }

        res: Response;
        response_init(&res);
        defer response_free(&res);

        // Process the request!
        tcp.pipeline->process(&req, &res);

        response_finalize(&res);

        s->setting(.NonBlocking, 0);
        send_response(&res, s);
        s->setting(.NonBlocking, 1);
    }

    return true;
}



#local
parse_request :: #match #local {}

#overload
parse_request :: (req: &Request, s: str) -> bool {
    stream := io.buffer_stream_make(s, fixed=true, write_enabled=false);
    r := io.reader_make(&stream);
    defer io.reader_free(&r);
    
    return parse_request(req, &r);
}

#overload
parse_request :: (req: &Request, r: &io.Reader) -> bool {
    // @ErrorHandling
    {
        request_line := r->read_line();
        if request_line.length == 0 do return false;

        method := string.read_until(&request_line, #char " ");
        string.advance(&request_line);

        m := core.array.first(runtime.info.enum_values(HTTP_Method), [v](v.name == method));
        if m == null do req.method = .UNKNOWN;
        else         do req.method = ~~m.value;

        route := string.read_until(&request_line, #char " ");
        string.advance(&request_line);

        req.endpoint = string.read_until(&route, #char "?");
        req._processed_endpoint = process_url_to_route_elems(req.endpoint);
        string.advance(&route);

        parse_url_encoded_key_value(&req.query, &route);
    }

    while true {
        header, value := parse_header(r);
        if header == "" do break;

        if header == "cookie" {
            // Parse cookies
            parse_cookies(value, &req.cookies);
            continue;
        }

        req.headers[header] = value;
    }

    parse_body(req, r);
    return true;
}

#local
parse_body :: (req: &Request, r: &io.Reader) {
    req.body.request = req;

    req.headers->get("content-length")->with([content_length_str] {
        body_length := cast(u32) (content_length_str |> conv.str_to_i64());
        if body_length == 0 {
            return;
        }

        body := make([] u8, body_length);
        index := 0;
        while index < body_length {
            read, err := r->read_bytes(body[index .. body_length]);
            index += read;
        }

        req.body.contents = body;
    });
}


#local
use_gc_allocator_in_current_scope :: macro (gc: &alloc.gc.GCState) {
    old_allocator := context.allocator;
    context.allocator = alloc.as_allocator(gc);
    defer {
        alloc.gc.clear(gc);
        context.allocator = old_allocator;
    }
}

